        /*_______________________[Class Design Tests]__________________________________________________________________________________________*/

        /*Inheritance
            CODE
         */
        //Create a number array
        Number number[] = new Number[4];
        //assign derived class objects
        number[0] = new Byte((byte)10);
        number[1] = new Integer(10);
        number[2] = new Float(10f);
        number[3] = new Double(10f);
        //pass the Number array to sum and print the results
        //_________________________________________________________________________________________________________________
        System.out.println("The sum of numbers is: " + sum(number));

        /*Polymorphism Code
            CODE
          In Java We have two different types of polymorphisms
            -> (Static (Early/Compile time polymorphism)) [Method Overloading]
            -> (Dynamic (Late/Run time polymorphism)) [Method Overriding]
         */

        //Dynamic Polymorphism from package [dynamicpoly]
        Shape shape1 = new Circle(10);
        System.out.println(shape1.area());
        Shape shape2 = new Square(10);
        System.out.println(shape2.area());

        //Static Polymorphism from package [staticpoly]
        System.out.println("Static Polymorphism starts here:");
        Calculate calc = new Calculate();
        System.out.println(calc.add(1, 2) + "parameters are INT and INT");
        System.out.println(calc.add(1.0, 2) + "parameters are DOUBLE and INT");
        System.out.println(calc.add(1, 2.0) + "parameters are INT and DOUBLE");
        System.out.println(calc.add(1, 2, 3)+ "parameters are INT, INT and INT");
        //_________________________________________________________________________________________________________________

        //Constructor overloading is similar to method overloading
        System.out.println("Constructor overloading starts here:");
        Calculator calc1 = new Calculator(1, 2);
        Calculator calc2 = new Calculator(1.1, 2);
        Calculator calc3 = new Calculator(1, 2.1);
        Calculator calc4 = new Calculator(1, 2, 3);
        System.out.println(calc1 + "\n" + calc2 + "\n" + calc3 + "\n" + calc4);
        //_________________________________________________________________________________________________________________
        //Overload Resolution
        System.out.println("Overload Resolution starts here: ");
        byte b = 9;
        OverloadResolution or = new OverloadResolution();
        //can you guess the output of the calls before you run this? and why?
        or.aMethod(b); //1st call
        or.aMethod(9); // 2nd call
        Integer i = 9;
        or.aMethod(i); // 3rd call
        or.aMethod("9"); // 4th call
        //After guessing and compiling the method above, were you correct about the outputs? page 20 has more explanation

        //This process of the compiler trying to resolve the method definitions is called overload resolution

        // Overload resolution fails (with compiler error) if there are no matches or ambiguous matches.
        //_________________________________________________________________________________________________________________


        //Overriding Methods in Object class
        System.out.println("Overriding Methods in Object class starts here");
        System.out.println(new Point(10, 20));
        //_________________________________________________________________________________________________________________

        System.out.println("Invoking Super class starts here: ");
        System.out.println(new Point2D(10, 20));
        System.out.println(new Point3D(10, 20, 30));
        //_________________________________________________________________________________________________________________


        System.out.println("Object composition starts here: ");
        System.out.println(new com.modisa.classdesign.models.classdesign.object.composition.Circle(10, 10, 20));
        //_________________________________________________________________________________________________________________


        System.out.println("Using Static Keyword starts here: ");
        //Before running this code, remove static keyword of variable count in the Counter class and look at the results
        Counter counter = new Counter();
        counter.printCount();
        Counter counter2 = new Counter();
        counter2.printCount();


                /*_______________________[Advanced Class Design Tests]__________________________________________________________________________________________*/
                //Abstract classes
                System.out.println("Abstract classes starts here: ");
                Shape shape = new Rectangle();

                System.out.println("Area = " + shape.area(10, 10));
                //_________________________________________________________________________________________________________________


                //Final Classes and Methods
                /*
                    Final classes cannot be extended
                    Final Methods cannot be overridden
                    Final Values cannot be changed after they have been initialised
                */
                System.out.println("Final classes starts here: ");

                //_________________________________________________________________________________________________________________


                // Nested Classes

                /*
                    We have 4 different types of nested classes and below I have described them

                    1. We have 2 types of Inner non-local inner classes
                        1. static inner class (static class within a class)
                        2. non-static inner class (an ordinary class within a class)
                    2. We also have 2 types of Inner local classes
                        1. Local inner class -> is a class within a method/constructor of another class
                        2. Anonymous Inner class -> is almost the same as Local Inner class the only difference
                           is that it does'nt have a name...so it means it also does'nt have a constructor
                */
                System.out.println("Nested classes starts here: ");
                StaticNonLocal.Inner inner = new StaticNonLocal.Inner(1, 1, 1);
                System.out.println("Test colors: " + inner);
                System.out.println(new InnerNonLocal(10, 20, 30));
                StaticNonLocal.Inner descriptiveColor =
                        LocalInner.getDescriptiveColor(new StaticNonLocal.Inner(1, 2, 3));
                System.out.println(descriptiveColor);
                StaticNonLocal.Inner descriptiveColors =
                        Anonymous.getDescriptiveColors(new StaticNonLocal.Inner(1, 2, 3));
                System.out.println(descriptiveColors);

                //_________________________________________________________________________________________________________________


                // Enums
                /*
                    Enum constructors cannot be public
                    Comparing two Enum constants from different enumeration will return false
                */
                System.out.println("Enum starts here: ");
                EnumTest enumTest = new EnumTest(PrinterType.LASER);
                enumTest.feature();
                EnumTest enumTest1 = new EnumTest(PrinterTypeCapacity.LASER);
                enumTest1.testCapacit();
                EnumTest enumTest2 = new EnumTest(PrinterTypeCapacity.INKJET);
                enumTest2.testCapacit();
                EnumTest enumTest3 = new EnumTest(PrinterTypeCapacity.DOTMATRIX);
                enumTest3.testCapacit();

                //_________________________________________________________________________________________________________________


                // Interfaces

                /*
                    Interface is set of abstract methods that describe a protocol
                    Classes that implement the interface must implement the methods inside the interface
                */
                System.out.println("Interfaces starts here: ");
                Circle circle = new Circle(1,2, 3);
                circle.roll(45);
                System.out.println("\n");

                //_________________________________________________________________________________________________________________


                // Functional Interfaces and Lambda Expression

                System.out.println("Functional Interface starts here");
                // IntConsumer myL = (int a) -> {Objects.requireNonNull(after); return anotherLambda}
                TestLambda myLambda = () -> 1 + 2;
                System.out.println(myLambda.printLambda());
                BlockLambda blockLambda = (int a) -> {
                    if ((a % 2) == 0) return "Even";
                    return "odd";
                };

                System.out.println(blockLambda.intKind(12));

                //_________________________________________________________________________________________________________________


                // Anonymous Inner Classes

                System.out.println("Anonymous Inner Classes starts here");
                TestAnonymous testAnonymous = new TestAnonymous(){
                    public void printAnonymous() {
                        System.out.println("Print from inner class");
                    }
                };

                testAnonymous.printAnonymous();